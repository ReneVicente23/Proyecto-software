/*
 * Mascotas API
 * Modelado de endpoins para la API de mascotas perdidas
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InfoProfile;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.PetList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for petUseridGet
     * @param userid Referencia de usuario (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de mascotas registradas </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo obtener la lista de mascotas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call petUseridGetCall(Integer userid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pet/{userid}"
            .replaceAll("\\{" + "userid" + "\\}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call petUseridGetValidateBeforeCall(Integer userid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling petUseridGet(Async)");
        }
        

        okhttp3.Call localVarCall = petUseridGetCall(userid, _callback);
        return localVarCall;

    }

    /**
     * Obtener la lista de mascotas registradas del usuario
     * Obtener la lista de mascotas del usuario que ha iniciado sesión 
     * @param userid Referencia de usuario (required)
     * @return List&lt;PetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de mascotas registradas </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo obtener la lista de mascotas </td><td>  -  </td></tr>
     </table>
     */
    public List<PetList> petUseridGet(Integer userid) throws ApiException {
        ApiResponse<List<PetList>> localVarResp = petUseridGetWithHttpInfo(userid);
        return localVarResp.getData();
    }

    /**
     * Obtener la lista de mascotas registradas del usuario
     * Obtener la lista de mascotas del usuario que ha iniciado sesión 
     * @param userid Referencia de usuario (required)
     * @return ApiResponse&lt;List&lt;PetList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de mascotas registradas </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo obtener la lista de mascotas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PetList>> petUseridGetWithHttpInfo(Integer userid) throws ApiException {
        okhttp3.Call localVarCall = petUseridGetValidateBeforeCall(userid, null);
        Type localVarReturnType = new TypeToken<List<PetList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener la lista de mascotas registradas del usuario (asynchronously)
     * Obtener la lista de mascotas del usuario que ha iniciado sesión 
     * @param userid Referencia de usuario (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de mascotas registradas </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo obtener la lista de mascotas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call petUseridGetAsync(Integer userid, final ApiCallback<List<PetList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = petUseridGetValidateBeforeCall(userid, _callback);
        Type localVarReturnType = new TypeToken<List<PetList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for petUseridPost
     * @param userid Referencia de usuario (required)
     * @param petinfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call petUseridPostCall(Integer userid, InlineObject2 petinfo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = petinfo;

        // create path and map variables
        String localVarPath = "/pet/{userid}"
            .replaceAll("\\{" + "userid" + "\\}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call petUseridPostValidateBeforeCall(Integer userid, InlineObject2 petinfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling petUseridPost(Async)");
        }
        
        // verify the required parameter 'petinfo' is set
        if (petinfo == null) {
            throw new ApiException("Missing the required parameter 'petinfo' when calling petUseridPost(Async)");
        }
        

        okhttp3.Call localVarCall = petUseridPostCall(userid, petinfo, _callback);
        return localVarCall;

    }

    /**
     * Registrar nueva mascota
     * Enviar una solicitud de registro de mascota 
     * @param userid Referencia de usuario (required)
     * @param petinfo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public void petUseridPost(Integer userid, InlineObject2 petinfo) throws ApiException {
        petUseridPostWithHttpInfo(userid, petinfo);
    }

    /**
     * Registrar nueva mascota
     * Enviar una solicitud de registro de mascota 
     * @param userid Referencia de usuario (required)
     * @param petinfo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> petUseridPostWithHttpInfo(Integer userid, InlineObject2 petinfo) throws ApiException {
        okhttp3.Call localVarCall = petUseridPostValidateBeforeCall(userid, petinfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Registrar nueva mascota (asynchronously)
     * Enviar una solicitud de registro de mascota 
     * @param userid Referencia de usuario (required)
     * @param petinfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call petUseridPostAsync(Integer userid, InlineObject2 petinfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = petUseridPostValidateBeforeCall(userid, petinfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGet
     * @param userlogin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Información del perfil </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud invalida o usuario inexistente </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCall(InlineObject userlogin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userlogin;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetValidateBeforeCall(InlineObject userlogin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userlogin' is set
        if (userlogin == null) {
            throw new ApiException("Missing the required parameter 'userlogin' when calling userGet(Async)");
        }
        

        okhttp3.Call localVarCall = userGetCall(userlogin, _callback);
        return localVarCall;

    }

    /**
     * Obtener información usuario
     * Obtener la información del usuario que ha iniciado sesión 
     * @param userlogin  (required)
     * @return InfoProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Información del perfil </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud invalida o usuario inexistente </td><td>  -  </td></tr>
     </table>
     */
    public InfoProfile userGet(InlineObject userlogin) throws ApiException {
        ApiResponse<InfoProfile> localVarResp = userGetWithHttpInfo(userlogin);
        return localVarResp.getData();
    }

    /**
     * Obtener información usuario
     * Obtener la información del usuario que ha iniciado sesión 
     * @param userlogin  (required)
     * @return ApiResponse&lt;InfoProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Información del perfil </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud invalida o usuario inexistente </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InfoProfile> userGetWithHttpInfo(InlineObject userlogin) throws ApiException {
        okhttp3.Call localVarCall = userGetValidateBeforeCall(userlogin, null);
        Type localVarReturnType = new TypeToken<InfoProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener información usuario (asynchronously)
     * Obtener la información del usuario que ha iniciado sesión 
     * @param userlogin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Información del perfil </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Solicitud invalida o usuario inexistente </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAsync(InlineObject userlogin, final ApiCallback<InfoProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetValidateBeforeCall(userlogin, _callback);
        Type localVarReturnType = new TypeToken<InfoProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPost
     * @param userinfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostCall(InlineObject1 userinfo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userinfo;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPostValidateBeforeCall(InlineObject1 userinfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userinfo' is set
        if (userinfo == null) {
            throw new ApiException("Missing the required parameter 'userinfo' when calling userPost(Async)");
        }
        

        okhttp3.Call localVarCall = userPostCall(userinfo, _callback);
        return localVarCall;

    }

    /**
     * Registrar nuevo usuario
     * Enviar una solicitud de registro de usuario 
     * @param userinfo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public void userPost(InlineObject1 userinfo) throws ApiException {
        userPostWithHttpInfo(userinfo);
    }

    /**
     * Registrar nuevo usuario
     * Enviar una solicitud de registro de usuario 
     * @param userinfo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userPostWithHttpInfo(InlineObject1 userinfo) throws ApiException {
        okhttp3.Call localVarCall = userPostValidateBeforeCall(userinfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Registrar nuevo usuario (asynchronously)
     * Enviar una solicitud de registro de usuario 
     * @param userinfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solicitud de guardado exitosa </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No se pudo enviar la solicitud </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostAsync(InlineObject1 userinfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPostValidateBeforeCall(userinfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
